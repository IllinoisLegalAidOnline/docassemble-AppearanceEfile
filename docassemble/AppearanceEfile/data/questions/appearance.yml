include:
  - docassemble.IlFeeWaiver:IL_fee_waiver_body.yml
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
  - docassemble.EFSPIntegration:efiling_integration.yml
  - docassemble.EFSPIntegration:login_qs.yml
  - docassemble.EFSPIntegration:case_search.yml
  - efile_ports.yml
---
metadata:
  title: Appearance
  short title: Appearance
  comment: This program helps you tell the court and the other parties that you are participating in a court case.
---
objects:
  - users: ALPeopleList.using(there_are_any=True)
  - other_parties: ALPeopleList.using(there_are_any=True)
  - delivery_parties: ALPeopleList.using(there_are_any=True)
  - court_list: ALCourtLoader.using(file_name='docassemble.ILAO:data/sources/il_courts.xlsx')
---
objects:
  - users[i].lawyer: ALIndividual
---
objects:
  - other_parties[i].lawyer: ALIndividual
---
objects:
  - delivery_parties[i].lawyer: ALIndividual
---
code: |
  al_form_type = 'existing_case'
  is_initial_filing = False
---
code: |
  proxy_conn = ProxyConnection(default_jurisdiction='illinois')
---
# Road map
# TODO: to turn on/off the Fee Waiver section, will need to use
# https://docassemble.org/docs/functions.html#DANav.set_sections
sections:
  - review_answers: Review your answers
---
code: |
  ilao_easy_form_title = "Appearance"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/legal-information/appearance"
  form_name = "Appearance"
  filing_basis = 'filing_self'
---
depends on: case_number
code: |
  # docket_number is used in the Fee Waiver interview, but case_number is
  # used in e-filing
  docket_number = case_number
---
depends on: found_case
code: |
  previous_case_id = found_case.tracking_id
  case_number = found_case.docket_id
  case_type = found_case.case_type
  case_category = found_case.category
---
# interview order block
mandatory: True
code: |
  sees_nav_bar
  set_progress(5)
  instructions
  if can_check_efile:
    tyler_login
  whats_next
  accept_terms
  nav.set_section('review_answers')
  set_progress(15)
  lawsuit_information
  # E-file specific
  if can_check_efile:
    found_case
    if not case_was_found:
      # TODO(brycew): not going to work with non-indexed at the moment
      can_check_efile = False
      needs_all_info = True
    else:
      previous_case_id
      case_number
      case_type
      case_category

      needs_all_info = False
      user_ask_role

      add_existing_users
      users[0].name.first

  user_ask_role
  # ask if whey want to add any more new parties to the case
  if can_check_efile:
    users.gather(complete_attribute='is_new')
    set_progress(30)
    other_parties.gather(complete_attribute='is_new')
  else:
    users.gather()
    set_progress(30)
    other_parties.gather()

  set_progress(40)
  trial_court
  case_number
  is_trial_by_jury
  set_progress(50)
  
  delivery_intro
  if delivery_parties.number() > 8:
    extra_delivery_forms
  for person in delivery_parties[:8]:
    if person.is_represented:
      person.lawyer.name.first
    person.address.address
    if person.knows_delivery_method:
      person.mail_delivery
      person.delivery_date
  set_progress(75)
  
  for person in delivery_parties[:8]:
    if person.knows_delivery_method == False or person.hand_delivery == True:
      hand_delivery_info
     
  users[0].address.address
  users[0].phone_number
  if can_check_efile:
    users[0].email_notice = True
  if users[0].email_notice:
    users[0].email
  lead_contact = users[0]
  
  set_progress(90)

  if can_check_efile:
    users[0].has_email_address = True
    e_signature = True
    signature_choice = 'add name'

    docket_number
    fee_waiver_introduction_screen
    interview_order_IL_fee_waiver
    illinois_appearance_bundle.completed
    IL_fee_waiver_package.has_courtesy_copies = illinois_appearance_bundle.has_courtesy_copies
    if IL_fee_waiver_package.has_courtesy_copies:
      IL_fee_waiver_package.courtesy_copies_raw = illinois_appearance_bundle.courtesy_copies_raw
      IL_fee_waiver_package.courtesy_copies = illinois_appearance_bundle.courtesy_copies
    
    IL_fee_waiver_package.completed
    tyler_payment_id = get_config('efile proxy', {}).get('global waiver', '')
    ready_to_efile
    # if e-filing, just use the e-signature to keep things simple
    inform_of_efile_e_signature
  else:
    e_signature

  set_progress(100)
  get_docs_screen
  ending_screen
---
question: |
  Existing parties on the case
subquestion: |
  % for party in found_case.participants:
  * ${ party.full_name }
  
  % endfor
continue button field: show_existing
---
question: |
  Next Step: Fee Waiver
subquestion: |
  You will now be walked through the fee waiver, to see if you qualify. This interview can
  only be e-filed by users who qualify for a fee waiver.
continue button field: fee_waiver_introduction_screen
---
code: |
  # NOTE(brycew): kinda hacky, but all of the courts allowed are just lowercase in Tyler.
  # we need some mapping from ILAO courts to Tyler courts, not sure the 
  # best way though yet. Cook really complicates things.
  court_id = str(trial_court.name).lower()
---
code: |
  users
  other_parties
  if not self_in_case:
    users.appendObject()
    users[0].is_new = True
    to_add_participants = found_case.participants
  else:
    self_partip_choice.is_new = False
    # Change where DA thinks this obj came from, so it says "you", and not "NAME"
    users.append(self_partip_choice.copy_deep('users[0]'))
    to_add_participants = [p for p in found_case.participants if p.instanceName != self_partip_choice.instanceName]

  for partip in to_add_participants:
    partip.is_new = False
    if partip.party_type == '20641' or \
        (partip.party_type_name is not None and 'defendent' in partip.role_name.lower()):
      if user_ask_role == 'defendant':
        users.append(partip.copy_deep(f'users[{len(users.elements)}]'))
      else:
        other_parties.append(partip.copy_deep(f'other_parties[{len(other_parties.elements)}]'))
    elif partip.party_type == '20646' or \
        (partip.party_type_name is not None and 'plaintiff' in partip.role_name.lower()):
      if user_ask_role == 'plaintiff':
        users.append(partip.copy_deep(f'users[{len(users.elements)}]'))
      else:
        other_parties.append(partip.copy_deep(f'other_parties[{len(other_parties.elements)}]'))
    else:
      log(f'partip: ${partip} has weird role: ${partip.party_type}')
  add_existing_users = True
---
code: |
  users[i].name.first
  if user_ask_role == 'defendant':
    users[i].party_type = '20641'
  else:
    users[i].party_type = '20646'
  users[i].is_new = True
---
code: |
  other_parties[i].name.first
  if user_ask_role == 'plaintiff':
    other_parties[i].party_type = '20646'
  else:
    other_parties[i].party_type = '20641'
  other_parties[i].is_new = True
---
id: welcome
question: |
  Appearance
subquestion: |
  Welcome to Illinois Legal Aid Online's **Appearance** Easy Form.

  This program creates a form that tells the court and the other parties that you are participating in a court case.
  
  Learn about [responding to a lawsuit](https://www.illinoislegalaid.org/node/32236).
field: sees_nav_bar
---
id: instructions
continue button field: instructions
question: |
  Instructions
subquestion: |
  To use this program you will need: 

  * Names and addresses of the other parties, 
  * Names and addresses of the other partiesâ€™ lawyers, and 
  * The court case number. 

  You can find this information on other court papers you have about this case. 

  Set aside 5 to 10 minutes to finish this program. You can login and save your work to return to later. 
 
  ${ collapse_template(help_example) }  

  Click on **{green words :question-circle:}** to learn what they mean.
---
template: help_example
subject: |
  **You can expand sections like this to show more information.**
content: |  
  This is an example of help. Click again to hide.
---
id: whats next
continue button field: whats_next
question: |
  After you finish this program
subquestion: |
  % if not can_check_efile:
  After you download your ${ form_name }, you must file it with the court. This program does not file your ${ form_name } for you.
 
  % else:
  This program will e-file your ${ form_name } for you. You will get a confirmation email
  when it does.
  
  If you run into an unexpected error, you can also file it with the court yourself.
  % endif
  Read the "How to File an Appearance" instructions you can download at the end of this program.
---
id: accept terms
question: |
  Terms of use
subquestion: |
  This program does not provide legal advice. It does not take the place of advice from a lawyer.

  Using this program does not create an attorney-client relationship between you and Illinois Legal Aid Online or its employees.

  ${ collapse_template(get_legal_help) }  

fields:
  - To continue, you must accept the [terms of use](https://www.illinoislegalaid.org/about/terms-of-use).: accept
    datatype: checkboxes
    none of the above: False
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use. 
continue button field: accept_terms
---
template: get_legal_help
subject: |
  **What if I need legal advice?**
content: |  
  If you have questions or concerns about your legal problem and want legal advice you should talk to a lawyer.
  
  Use [Get Legal Help](https://www.illinoislegalaid.org/get-legal-help) to find free or low-cost legal services in your area.
---
id: not legal advice
event: not_legal_advice
question: |
  Sorry
subquestion: |
  You cannot continue unless you understand this program does not give legal advice and accept the [terms of use](https://www.illinoislegalaid.org/about/terms-of-use).

  This program will only help you complete the legal documents you want. By providing this program we are not giving you legal advice. Your use of this program does not mean that Illinois Legal Aid Online will provide you with a lawyer or with any individual legal help.

  If you have questions or concerns about your legal problem and want legal advice you should talk to a lawyer. If you would like help finding free or low-cost legal services in your area, use [Get Legal Help](https://www.illinoislegalaid.org/get-legal-help).

buttons:
  - Exit: exit
  - Restart: restart
---
id: lawsuit information
continue button field: lawsuit_information
question: |
  Lawsuit information
subquestion: |
  If you received a Complaint and Summons, you have been sued. You need to tell the court you want to participate in your case. In some cases, you need to file an **{Answer :question-circle:}** to respond to the Complaint.
  
  If you do not respond, you can be found in default, and the court can rule against you. In some cases, like evictions, you do not need to file an Appearance. Instead, you can attend your court hearing.
  
  Learn more about [Responding to a lawsuit](https://www.illinoislegalaid.org/node/32236).
  
  ${ collapse_template(started_lawsuit_help) }  
  
  If you would like help finding free or low-cost legal services in your area, use [Get Legal Help](https://www.illinoislegalaid.org/get-legal-help).
---
template: started_lawsuit_help
subject: |
  **What if I started the lawsuit?**
content: |  
  You can also file an Appearance if you started the lawsuit. Usually, you only need to file an Appearance if you had a lawyer in the case before, but now you want to represent yourself.
---
id: any other users
question: |
  % if al_form_type in ['starts_case','existing_case','appeal']:
  Is anyone else on your side of this case?
  % else:
  Is anyone else adding their name to this form with you?
  % endif
subquestion: |
  % if len(users.elements) > 1:  
  So far you have told us about ${comma_and_list(users.complete_elements().full_names())}.
  % endif  
fields:
  - no label: users.there_is_another
    datatype: yesnoradio
---
comment: |
  Overrides a screen in EFSPIntegration:case_search.yml
question: |
  You are not able to e-file this Appearance
subquestion: |
  We could not find the case you wanted to file into. The case might still exist,
  but it hasn't been entered into the court's system electronically.
  You will have to print out and file this form on paper.
continue button field: warn_no_results
---
template: other_parties_help
subject: |
  **How do I know if there are others?**
content: |  
    % if user_ask_role == 'plaintiff':
    You said you are the **Plaintiff** or the **Petitioner.** The other people on your side of the case would be co-plaintiffs or co-petitioners.
    % else:
    You said you are the **Defendant** or the **Respondent.** The other people on your side of the case would be co-defendants or co-respondents.
    % endif
---
depends on:
  - user_started_case
sets:
  - users[i].name.first
id: other users names
question: |
  % if al_form_type in ['starts_case','existing_case','appeal']:
  What is the name of the ${ ordinal(i) } person who is part of the case with you?
  % else:
  What is the name of the ${ ordinal(i) } person who is adding their name to
  this form with you?
  % endif
subquestion: |
  ${ collapse_template(long_name_help) }
fields:
  - code: |
      users[i].name_fields(person_or_business='unsure')
---
template: long_name_help
subject: |
  **What if the person's name doesn't fit into 4 fields?**
content: |
  If the party has a long name like "Jane Smith, Director of Housing," select **Business or organization**. You can then enter the full name and title.
---
# modified other opposing parties question
# add to basic questions
id: any other opposing parties
question: |
  % if users==plaintiffs:
  Is there another **defendant** or **respondent** in this case?
  % else:
  Is there another **plaintiff** or **petitioner** in this case?
  % endif
subquestion: |
  % if len(other_parties.elements) >= 1:  
  So far you have told us about ${comma_and_list(other_parties.complete_elements().full_names())}.
  % endif
fields:
  - "Anyone else?": other_parties.there_is_another
    datatype: yesnoradio
---
question: |
  % if len(filtered_case_partips) == 1:
  We found this participant in the existing case
  % else:
  We found these participants in the existing case
  % endif
subquestion: |
  % if len(filtered_case_partips) == 1:
  Are you ${ filtered_case_partips[0] }?
  % elif len(filtered_case_partips) > 1:
  % for partip in filtered_case_partips:
  * ${ partip }
  % endfor
  
  Are you any of the above participants?
  % endif
fields:
  - no label: self_in_case
    datatype: yesnomaybe
---
---
id: is the user the plaintiff or defendant?
comment: |
  This question is asked if the interview can be used by both
  a Plaintiff and a Defendant. It sets the value of `user_role`,
  `plaintiffs`, `defendants`, `petitioners` and `respondents`.
  
  If you know your interview is exclusively
  used by the Plaintiff or Defendant, set `user_role = 'plaintiff'` or 
  `user_role='defendant'` in your code.
question: |
  Did you start this case, or are you responding to a case
  that someone else started?
subquestion: |
  ${ collapse_template(help_user_ask_role_template) }
fields: 
  - no label: user_ask_role
    datatype: radio
    choices:
      - Started this case: plaintiff
      - Responding to this case: defendant
  - note: |
      Okay, you are the **Plaintiff** or Petitioner in this case. The other 
      side is the **Defendant** or Respondent.
    show if:
      variable: user_ask_role
      is: "plaintiff"
  - note: |
      Okay, you are the **Defendant** or Respondent in this case. The other 
      side is the **Plaintiff** or Petitioner.
    show if:
      variable: user_ask_role
      is: "defendant"
---
---
question: |
  Which participant are you?
fields:
  - I am: self_partip_choice
    datatype: object_radio
    choices: |
      found_case.participants.filter(party_type= '20641' if user_ask_role=='defendant' else '20646')
---
code: |
  filtered_case_partips = found_case.participants.filter(
      party_type='20641' if user_ask_role == 'defendant' else '20646')
---
code: |
  if len(filtered_case_partips) == 1:
    self_partip_choice = filtered_case_partips[0]
---
depends on:
  - user_started_case
sets:
  - other_parties[i].name.first
id: names of opposing parties
question: |
  % if users==plaintiffs:
  Name of ${ ordinal(i) } **defendant** or **respondent** in this case
  % else:
  Name of ${ ordinal(i) } **plaintiff** or **petitioner** in this case
  % endif
subquestion: |
  ${ collapse_template(long_name_help) }
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='unsure')
---
code: |
  allowed_courts = ['Circuit']
---
id: trial court county
continue button field: case_county
question: |
  In which county was this case filed?
fields:
  - no label: trial_court_index
    code: |
      #court_list.filter_courts(allowed_courts, column='department')
      court_list._load_courts()['address_county'].items()
---
generic object: DAObject
id: filing type et al.
question: |
  What filing type will you be making?
fields:
  - Filing Type: x.filing_type
    datatype: dropdown
    code: |
      appearance_filing_type_options
---
generic object: DAObject
id: courtesy email
question: |
  Do you want anyone to recieve a courtesy email when you file the ${ x.title }?
fields:
  - Add a courtesy email: x.has_courtesy_copies
    datatype: yesno
  - Courtesy emails (one per line): x.courtesy_copies_raw
    datatype: area
    show if: x.has_courtesy_copies
validation code: |
  if x.has_courtesy_copies:
    x.courtesy_copies = x.courtesy_copies_raw.splitlines()
    for copy in x.courtesy_copies:
      if not '@' in copy:
        validation_error("Enter a valid email address.", field="x.courtesy_copies_raw")
        break
---
code: |
  appear_filings_tmp = []
  if is_trial_by_jury:
    appear_filings_tmp = list(filter(lambda opt: 'Appearance' in opt[1] and 'Jury' in opt[1], filing_type_options))

  if not appear_filings_tmp:
    # Code numbers explictily confirmed to be the right ones
    appear_filings_tmp = list(filter(lambda opt: opt[0] == '142566', filing_type_options))

  if not appear_filings_tmp:
    appear_filings_tmp = list(filter(lambda opt: opt[1] == 'Appearance (No Fee: fee exempted by rule/statute)', filing_type_options))

  if not appear_filings_tmp:
    appear_filings_tmp = list(filter(lambda opt: 'Appearance' in opt[1] and 'No Fee' in opt[1], filing_type_options))

  if not appear_filings_tmp:
    appear_filings_tmp = list(filter(lambda opt: 'Appearance' in opt[1], filing_type_options))

  if not appear_filings_tmp:
    appear_filings_tmp = filing_type_options

  appearance_filing_type_options = sorted(appear_filings_tmp, key=lambda option: option[1])
  del appear_filings_tmp
---
generic object: DAObject
code: |
  if len(appearance_filing_type_options) == 1:
    x.filing_type = appearance_filing_type_options[0][0]
  # TODO(brycew): choose the Filing type based on the Judge + Jury question and what's available.
---
generic object: DAObject
code: |
  x.filing_description = f'The completed Illinois Appearance Form for {users[0].name}'
  x.reference_number = None
  if '332' in x.filing_component_map:
    x.filing_component_code = '332'
  x.filing_parties = ['users[0]']
  x.filing_action = 'efile'
---
depends on:
  - trial_court_index
code: |
  trial_court = court_list.as_court('trial_court', trial_court_index)
  # work around: use assignment instead of this variable
  #trial_court.geolocate()
  # use this in the attachment block: trial_court.address.county
---
id: case number
question: |
  What is the case number?
subquestion: |
  ${ collapse_template(case_number_help) }  
fields:
  - Case number: case_number
---
template: case_number_help
subject: |
  **Where can I find this?**
content: |  
  The case number should be on your court papers. Look at the Complaint or Petition, or the Summons if you received one. It is usually in the top-right part of the first page.
  
  If you started the case, the court clerk should have given you the case number.
  
  In this example, the case number is **2022 EXAMPLE 123**.
  
  [FILE case_number_example.png, 100%, Summons form showing case number]
---
id: trial by jury
question: |
  Who do you want to decide your case?
subquestion: |
  Note: You do not have a right to a jury trial in every case. There can be an additional fee for a jury trial.
field: is_trial_by_jury
choices:
  - A judge: False
  - A judge and jury: True
---
id: phone number
question: |
  What is your phone number?
fields:
  - Phone: users[0].phone_number
    required: False
---
id: notice by email
question: |
  Do you have an email address?
subquestion: |
  If you have an email address, you must list it so the court and other parties can contact you about this case.
fields:
  - "Email?": users[0].email_notice
    datatype: yesnoradio
---
id: email address
question: |
  What email address do you want to list on your court forms?
subquestion: |
  If you do not want to enter your personal email address, you can create a new email account to get email about your case.
  
  Be sure to check this email daily, otherwise you may miss important information about your case.
fields:
  - Email address: users[0].email    
    datatype: email
    #required: False
---
id: e-signature
question: |
  Do you want to add your e-signature to your ${ form_name }?
subquestion: |
  If you do not add your e-signature, you can sign your paper form later.
fields:
  - "Add e-signature?": e_signature
    datatype: yesnoradio
---
id: inform e-signature
question: |
  We'll add your e-signature to your ${ form_name }
subquestion: |
  Since you are e-filing, your name will be automatically added as 
  an e-signature to the form
continue button field: inform_of_efile_e_signature
---
reconsider: True
code: |
  delivery_parties = DAList("delivery_parties", elements = other_parties + users[1:])
# changed order to keep it a DAList
---
id: extra delivery forms required
continue button field: extra_delivery_forms
question: |
  Additional Proof of Delivery
subquestion: |
  This program makes the Proof of Delivery forms for the first 8 parties.
  
  You will need to fill out *Additional Proof of Delivery* forms for the other parties in your case. 
  
  You can download blank *Additional Proof of Delivery* forms at the end of this program.
---
id: delivery intro
continue button field: delivery_intro
question: |
  Send your ${ form_name } to all other parties
subquestion: |
  These are the other parties in this case: ${comma_and_list(delivery_parties)}.

  You must send a copy of your ${ form_name } to each of them.

  If someone in the case has a lawyer, you must send it to the lawyer.
---
id: has lawyer
generic object: ALIndividual
question: |
  Does ${ x.name.full(middle="full") } have a lawyer in this case?
subquestion: |
  % if defined('found_case') and found_case and hasattr(x, 'tyler_id'):
  % if not found_case.party_to_attorneys.get(x.tyler_id):
  ${ x.name.familiar() } does not have a lawyer in the electronic system,
  but they could have gotten one more recently.
  % endif
  % endif
field: x.is_represented
choices:
  - Yes: True
  - No: False
  - I don't know: null 
# note: null will be None in review screen
---
id: add lawyer
generic object: ALIndividual
question: |
  Who is  ${ x.name.full(middle="full") }'s lawyer?
fields:
  - First name: x.lawyer.name.first
  - Middle name: x.lawyer.name.middle
    required: False
  - Last name: x.lawyer.name.last
  - Suffix: x.lawyer.name.suffix
    code: |
      name_suffix()
    required: False  
---
id: delivery party address
sets:
  - x.address.address
  - x.address.city
  - x.address.zip
generic object: ALIndividual
question: |
  % if x.is_represented:
  What is ${ x.lawyer.name.full(middle="full") }'s address?
  % else:
  What is ${ x.name.full(middle="full") }'s address?
  % endif
fields:
  - Street address: x.address.address
    address autocomplete: True
  - Address line 2: x.address.unit
    required: False
  - City: x.address.city
  - State: x.address.state
    code: |
      states_list()
    default: IL      
  - ZIP code: x.address.zip
---
id: knows delivery method
generic object: ALIndividual
question: |
  % if x.is_represented:
  Do you know **how** and **when** you will send your ${ form_name } to ${ x.lawyer.name.full(middle="full") }?
  % else:
  Do you know **how** and **when** you will send your ${ form_name } to ${ x.name.full(middle="full") }?
  % endif
subquestion: |
  If you do not know this now, you can add it to the Proof of Delivery section of your forms later.
field: x.knows_delivery_method
choices:
  - Yes: True
  - No: False
---
id: user party delivery method
#changed from generic object to users to allow for changing answers via Back
#generic object: ALIndividual
question: |
  % if users[i].is_represented:
  How will you send your ${ form_name } to ${ users[i].lawyer.name.full(middle="full") }?
  % else:
  How will you send your ${ form_name } to ${ users[i].name.full(middle="full") }?
  % endif
subquestion: |
  You may use US mail, a delivery company, or hand delivery if you or the other party **does not** have an email address.
  
  ${ collapse_template(efiling_help) }
fields:
  - E-filing system: users[i].efm_delivery
    datatype: yesnowide
    help: |
      The court's e-filing system could be an electronic filing manager (EFM) or an approved electronic filing service provider (EFSP).
    show if:
      code: |
        not can_check_efile
  - Email: users[i].email_delivery
    datatype: yesnowide
  - Email address: users[i].delivery_email
    datatype: email
    show if: 
      variable: users[i].email_delivery
      is: True
    required: False
  - US mail or delivery company (like UPS or FedEx): users[i].mail_delivery
    datatype: yesnowide
  - Hand delivery: users[i].hand_delivery
    datatype: yesnowide
---
template: efiling_help
subject: |
  **What if I need help?**
content: |  
  If you need help delivering by email or using the e-filing service provider, you can visit a [Legal Self-Help Center](https://www.illinoislegalaid.org/get-legal-help/lshc-directory) or you can call or text [Illinois Court Help](https://www.ilcourthelp.gov) at 833-411-1121.
---
id: other party delivery method
# generic object: ALIndividual
#changed from generic object to other_parties to allow for changing answers via Back
question: |
  % if other_parties[i].is_represented:
  How will you send your ${ form_name } to ${ other_parties[i].lawyer.name.full(middle="full") }?
  % else:
  How will you send your ${ form_name } to ${ other_parties[i].name.full(middle="full") }?
  % endif
subquestion: |
  You may use US mail, a delivery company, or hand delivery if you or the other party **does not** have an email address.
  
  ${ collapse_template(efiling_help) }
fields:
  - E-filing system: other_parties[i].efm_delivery
    datatype: yesnowide
    help: |
      The court's e-filing system could be an electronic filing manager (EFM) or an approved electronic filing service provider (EFSP).
    show if:
      code: |
        not can_check_efile
  - Email: other_parties[i].email_delivery
    datatype: yesnowide
  - Email address: other_parties[i].delivery_email
    datatype: email
    show if: 
      variable: other_parties[i].email_delivery
      is: True
    required: False
  - US mail or delivery company (like UPS or FedEx): other_parties[i].mail_delivery
    datatype: yesnowide
  - Hand delivery: other_parties[i].hand_delivery
    datatype: yesnowide
---
id: delivery time
generic object: ALIndividual
question: |
  % if x.is_represented:
  When will you send your ${ form_name } to ${ x.lawyer.name.full(middle="full") }?
  % else:
  When will you send your ${ form_name } to ${ x.name.full(middle="full") }?
  % endif
fields:
  - Date: x.delivery_date
    datatype: date
    default: ${ today().format("yyyy-MM-dd") }
    min: ${ today().format("yyyy-MM-dd") }
  - Time: x.delivery_time
    datatype: time
---
id: hand delivery info
continue button field: hand_delivery_info
#generic object: ALIndividual
question: |
  Complete your Proof of Delivery
subquestion: |

  Make sure you complete the Proof of Delivery section of your forms. 
  
  Instructions when delivering your forms by hand:

  * If a party in your case does not have a lawyer, you can hand-deliver to them or to a family member who is 13 or older at their home.
  * If they do have a lawyer, you can hand-deliver to the lawyer or to the lawyer's office.
  
  [FILE proof_of_delivery_snip.png, 100%, Proof of Delivery section of forms]

---
id: get docs screen
event: get_docs_screen
question: |
  Download
subquestion: |
  
  Your forms are ready. View and download your forms below. Click **Make changes** to fix any mistakes.

  This program does not file your Appearance with the court or deliver it to other parties in your case. You will need to do this yourself. Learn about [e-filing in Illinois](https://www.illinoiscourts.gov/eservices/efileil/).

  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }
  
  % if ready_to_efile and not (defined('efile') and efile):
  
  Click the "E-File" button below to e-file your form at ${ trial_court }.
  
  ${ action_button_html(url_ask([{'recompute': ['efile']}]), label='E-File', icon='file-export')}
  
  % endif
  
  ${ al_user_bundle.download_list_html() }

  &nbsp;

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  **Note:** This program does not file your Appearance with the court or deliver it to other parties in your case. Learn about [e-filing in Illinois](https://www.illinoiscourts.gov/eservices/efileil/).
  
  Thank you for using ILAO Easy Forms!
under: |
  % if not user_logged_in():
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} Sign-in](${url_of('login', next=interview_url())}) or [register](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif 

  &nbsp;
  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=user_info().question_id, easy_form_variable=user_info().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
# old email forms functionality
#id: email forms
#question: |
#  Email your forms
#subquestion: |
#  Where should we email your forms?
#  
#  This program does not file your Appearance with the court or deliver it to other parties in your case. You will need to do this yourself.
#fields:
#  - Email address: users[0].delivery_email
#    datatype: email
#continue button label: Send
#---
#template: forms_email
#subject: |
#  Appearance forms
#content: |
#  Your forms are attached.
#  
#  Thanks for using ILAO Easy Forms!
#  
#  [Illinois Legal Aid Online](https://www.illinoislegalaid.org)
#---
#id: ending screen
#event: ending_screen
#question: |
#  All done
#subquestion: |
#  Thank you for using ILAO Easy Forms!
#  
#  This program does not file your Appearance with the court or deliver it to other parties in your case. You will need to do this yourself.
##buttons:
##  - Delete answers and restart: restart
##  - Exit: exit
#under: |
#  % if not user_logged_in():
#  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} Sign-in](${url_of('login', next=interview_url())}) or [register](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
#  % endif 
#
#  &nbsp;
#  
#  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=user_info().question_id, easy_form_variable=user_info().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
generic object: ALDocumentBundle
template: x.send_email_template
subject: |
  Appearance forms
content: |
  Your forms are attached.
  
  Thanks for using ILAO Easy Forms!
  
  [Illinois Legal Aid Online](https://www.illinoislegalaid.org)
---
id: ending screen
event: ending_screen
question: |
  All done
subquestion: |
  Thank you for using ILAO Easy Forms!
  
  This program does not file your Appearance with the court or deliver it to other parties in your case. You will need to do this yourself.
#buttons:
#  - Delete answers and restart: restart
#  - Exit: exit
under: |
  % if not user_logged_in():
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} Sign-in](${url_of('login', next=interview_url())}) or [register](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif 

  &nbsp;
  
  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=user_info().question_id, easy_form_variable=user_info().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
objects:
  - illinois_appearance_attachment: ALDocument.using(title="Appearance", filename="appearance.pdf", has_addendum=False)
  - illinois_appearance_instructions: ALDocument.using(title="Instructions", filename="instructions.pdf", has_addendum=False)
  - illinois_appearance_additional: ALDocument.using(title="Additional Proof of Delivery", filename="appearance_additional_proof_delivery.pdf", has_addendum=False)
  - illinois_appearance_additional_2: ALDocument.using(title="Additional Proof of Delivery 2", filename="appearance_additional_proof_delivery_2.pdf", has_addendum=False)
  - illinois_appearance_additional_3: ALDocument.using(title="Additional Proof of Delivery 3", filename="appearance_additional_proof_delivery_3.pdf", has_addendum=False)
  - illinois_appearance_additional_blank: ALDocument.using(title="Additional Proof of Delivery (blank)", filename="appearance_additional_proof_delivery_blank.pdf", has_addendum=False)
---
code: |
  illinois_appearance_attachment.enabled = True
  illinois_appearance_instructions.enabled = True
  illinois_appearance_additional.enabled = False
  illinois_appearance_additional_2.enabled = False
  illinois_appearance_additional_3.enabled = False
  illinois_appearance_additional_blank.enabled = False

  if delivery_parties.number() < 5:
    illinois_appearance_additional.enabled = True
  elif delivery_parties.number() < 7:
    illinois_appearance_additional.enabled = True
    illinois_appearance_additional_2.enabled = True
  elif delivery_parties.number() < 9:
    illinois_appearance_additional.enabled = True
    illinois_appearance_additional_2.enabled = True
    illinois_appearance_additional_3.enabled = True
  else:
    illinois_appearance_additional.enabled = True
    illinois_appearance_additional_2.enabled = True
    illinois_appearance_additional_3.enabled = True
    illinois_appearance_additional_blank.enabled = True
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[illinois_appearance_instructions, illinois_appearance_bundle, illinois_appearance_additional_blank, IL_fee_waiver_package], filename="appearance.pdf", title="Download all forms")
  - al_court_bundle: ALDocumentBundle.using(elements=[illinois_appearance_bundle, IL_fee_waiver_package], filename="appearance.pdf", title="Appearance")
---
objects:
  - illinois_appearance_bundle: ALDocumentBundle.using(elements=[illinois_appearance_attachment, illinois_appearance_additional, illinois_appearance_additional_2, illinois_appearance_additional_3], filename="appearance.pdf", title="Appearance", enabled=True)
---
attachment:
  variable name: illinois_appearance_instructions[i]
  name: illinois_appearance_instructions
  filename: appearance-instructions
  skip undefined: True
  editable: False
  pdf template file: appearance_instructions_with_fake_field.pdf
  fields:
      - "fake": ${ "" }
---
attachment:
  variable name: illinois_appearance_attachment[i]
  name: illinois_appearance_attachment
  filename: appearance
  skip undefined: True
  editable: False
  pdf template file: appearance_edited.pdf
  fields:
      - "trial_court_county": ${ trial_court.address.county.upper() }
      - "plaintiffs": ${ users.full_names() if user_ask_role == 'plaintiff' else other_parties.full_names() }
      - "defendants": ${ other_parties.full_names() if user_ask_role == 'plaintiff' else users.full_names() }
      - "user__1": ${ users[0].name.full(middle="full") }
      - "user__2": ${ users[0].name.full(middle="full") }
      - "user__3": ${ users[0].name.full(middle="full") }
      - "user_mail_address_line_one__1": ${ users[0].address.line_one(bare=True) }
      - "user_mail_address_line_one__2": ${ users[0].address.line_one(bare=True) }
      - "user_mail_address_city_state_zip__1": ${ users[0].address.line_two() }
      - "user_mail_address_city_state_zip__2": ${ users[0].address.line_two() }
      - "user_phone_number__1": ${ phone_number_formatted(users[0].phone_number) }
      - "user_phone_number__2": ${ phone_number_formatted(users[0].phone_number) }
      - "user_email": ${ users[0].email if users[0].email_notice else '' }
      - "user_email__2": ${ users[0].email if users[0].email_notice else '' }
      - "case_number__1": ${ case_number }
      - "case_number__2": ${ case_number }
      - "case_number__3": ${ case_number }
      - "is_trial_by_jury_yes": ${ is_trial_by_jury }
      - "is_trial_by_jury_no": ${ not is_trial_by_jury }
      - "e_sign_name__1": ${ users[0].name.full(middle="full") if e_signature else '' }
      - "e_sign_name__2": ${ users[0].name.full(middle="full") if e_signature else '' }
      - "is_email_notice_yes": ${ users[0].email_notice }

      - "delivery_party1_name_full": | 
          % if delivery_parties[0].is_represented:
          ${ delivery_parties[0].lawyer.name.full(middle="full") }, (lawyer for ${ delivery_parties[0].name.full(middle="full") })
          % else:
          ${ delivery_parties[0].name.full(middle="full") }
          % endif
      - "delivery_party1_mail_address_on_one_line": ${ delivery_parties[0].address.on_one_line(bare=True) }
      - "delivery_party1_email": ${ delivery_parties[0].delivery_email if delivery_parties[0].knows_delivery_method else '' }
      - "is_delivery_party1_hand_yes": ${ delivery_parties[0].hand_delivery if delivery_parties[0].knows_delivery_method else '' }
      - "is_delivery_party1_mail_yes": ${ delivery_parties[0].mail_delivery if delivery_parties[0].knows_delivery_method else '' }
      - "is_delivery_party1_efm_yes": ${ delivery_parties[0].efm_delivery if delivery_parties[0].knows_delivery_method else '' }
      - "is_delivery_party1_email_yes": ${ delivery_parties[0].email_delivery if delivery_parties[0].knows_delivery_method else '' }
      - "delivery_party1_date": ${ delivery_parties[0].delivery_date if delivery_parties[0].knows_delivery_method else '' }
      - "delivery_party1_time": ${ format_time(delivery_parties[0].delivery_time, format='h:mm') if delivery_parties[0].knows_delivery_method else '' }
      - "is_delivery_party1_am_yes": ${ True if format_time(delivery_parties[0].delivery_time, format='a')=='AM' else '' }
      - "is_delivery_party1_am_no": ${ True if format_time(delivery_parties[0].delivery_time, format='a')=='PM' else '' }

      - "delivery_party2_name_full": | 
          % if delivery_parties[1].is_represented:
          ${ delivery_parties[1].lawyer.name.full(middle="full") }, (lawyer for ${ delivery_parties[1].name.full(middle="full") })
          % else:
          ${ delivery_parties[1].name.full(middle="full") }
          % endif
      - "delivery_party2_mail_address_on_one_line": ${ delivery_parties[1].address.on_one_line(bare=True) }
      - "delivery_party2_email": ${ delivery_parties[1].delivery_email if delivery_parties[1].knows_delivery_method else '' }
      - "is_delivery_party2_hand_yes": ${ delivery_parties[1].hand_delivery if delivery_parties[1].knows_delivery_method else '' }
      - "is_delivery_party2_mail_yes": ${ delivery_parties[1].mail_delivery if delivery_parties[1].knows_delivery_method else '' }
      - "is_delivery_party2_efm_yes": ${ delivery_parties[1].efm_delivery if delivery_parties[1].knows_delivery_method else '' }
      - "is_delivery_party2_email_yes": ${ delivery_parties[1].email_delivery if delivery_parties[1].knows_delivery_method else '' }
      - "delivery_party2_date": ${ delivery_parties[1].delivery_date if delivery_parties[1].knows_delivery_method else '' }
      - "delivery_party2_time": ${ format_time(delivery_parties[1].delivery_time, format='h:mm') if delivery_parties[1].knows_delivery_method else '' }
      - "is_delivery_party2_am_yes": ${ True if format_time(delivery_parties[1].delivery_time, format='a')=='AM' else '' }
      - "is_delivery_party2_am_no": ${ True if format_time(delivery_parties[1].delivery_time, format='a')=='PM' else '' }

      - "is_additional_proof_delivery_yes": ${ delivery_parties.number() > 2 }
---
attachment:
  variable name: illinois_appearance_additional[i]
  name: illinois_appearance_additional
  filename: appearance-additional-delivery
  skip undefined: True
  editable: False
  pdf template file: appearance_additional_proof_delivery_edited.pdf
  fields:
      - "trial_court_county": ${ trial_court.address.county.upper() }
      - "case_number__1": ${ case_number }
      - "case_number__2": ${ case_number }
      - "plaintiffs": ${ users.full_names() if user_ask_role == 'plaintiff' else other_parties.full_names() }
      - "defendants": ${ other_parties.full_names() if user_ask_role == 'plaintiff' else users.full_names() }
      - "form_to_be_delivered": ${ form_name }
      - "delivery_party1_name_full": | 
          % if delivery_parties[2].is_represented:
          ${ delivery_parties[2].lawyer.name.full(middle="full") }, (lawyer for ${ delivery_parties[2].name.full(middle="full") })
          % else:
          ${ delivery_parties[2].name.full(middle="full") }
          % endif
      - "delivery_party1_mail_address_on_one_line": ${ delivery_parties[2].address.on_one_line(bare=True) }
      - "delivery_party1_email": ${ delivery_parties[2].delivery_email if delivery_parties[2].knows_delivery_method else '' }
      - "is_delivery_party1_hand_yes": ${ delivery_parties[2].hand_delivery if delivery_parties[2].knows_delivery_method else '' }
      - "is_delivery_party1_mail_yes": ${ delivery_parties[2].mail_delivery if delivery_parties[2].knows_delivery_method else '' }
      - "is_delivery_party1_efm_yes": ${ delivery_parties[2].efm_delivery if delivery_parties[2].knows_delivery_method else '' }
      - "is_delivery_party1_email_yes": ${ delivery_parties[2].email_delivery if delivery_parties[2].knows_delivery_method else '' }
      - "delivery_party1_date": ${ delivery_parties[2].delivery_date if delivery_parties[2].knows_delivery_method else '' }
      - "delivery_party1_time": ${ format_time(delivery_parties[2].delivery_time, format='h:mm') if delivery_parties[2].knows_delivery_method else '' }
      - "is_delivery_party1_am_yes": ${ True if format_time(delivery_parties[2].delivery_time, format='a')=='AM' else '' }
      - "is_delivery_party1_am_no": ${ True if format_time(delivery_parties[2].delivery_time, format='a')=='PM' else '' }
      
      - "delivery_party2_name_full": | 
          % if delivery_parties[3].is_represented:
          ${ delivery_parties[3].lawyer.name.full(middle="full") }, (lawyer for ${ delivery_parties[3].name.full(middle="full") })
          % else:
          ${ delivery_parties[3].name.full(middle="full") }
          % endif
      - "delivery_party2_mail_address_on_one_line": ${ delivery_parties[3].address.on_one_line(bare=True) }
      - "delivery_party2_email": ${ delivery_parties[3].delivery_email if delivery_parties[3].knows_delivery_method else '' }
      - "is_delivery_party2_hand_yes": ${ delivery_parties[3].hand_delivery if delivery_parties[3].knows_delivery_method else '' }
      - "is_delivery_party2_mail_yes": ${ delivery_parties[3].mail_delivery if delivery_parties[3].knows_delivery_method else '' }
      - "is_delivery_party2_efm_yes": ${ delivery_parties[3].efm_delivery if delivery_parties[3].knows_delivery_method else '' }
      - "is_delivery_party2_email_yes": ${ delivery_parties[3].email_delivery if delivery_parties[3].knows_delivery_method else '' }
      - "delivery_party2_date": ${ delivery_parties[3].delivery_date if delivery_parties[3].knows_delivery_method else '' }
      - "delivery_party2_time": ${ format_time(delivery_parties[3].delivery_time, format='h:mm') if delivery_parties[3].knows_delivery_method else '' }
      - "is_delivery_party2_am_yes": ${ True if format_time(delivery_parties[3].delivery_time, format='a')=='AM' else '' }
      - "is_delivery_party2_am_no": ${ True if format_time(delivery_parties[3].delivery_time, format='a')=='PM' else '' }

      - "user": ${ users[0].name.full(middle="full") }
      - "user_mail_address_line_one": ${ users[0].address.line_one(bare=True) }
      - "user_mail_address_city_state_zip": ${ users[0].address.line_two() }
      - "user_phone_number": ${ phone_number_formatted(users[0].phone_number) }
      - "user_email": ${ users[0].email if users[0].email_notice else '' }
      - "e_sign_name": ${ users[0].name.full(middle="full") if e_signature else '' }
---
attachment:
  variable name: illinois_appearance_additional_2[i]
  name: illinois_appearance_additional_2
  filename: appearance-additional-delivery-2
  skip undefined: True
  editable: False
  pdf template file: appearance_additional_proof_delivery_edited.pdf
  fields:
      - "trial_court_county": ${ trial_court.address.county.upper() }
      - "case_number__1": ${ case_number }
      - "case_number__2": ${ case_number }
      - "plaintiffs": ${ users.full_names() if user_ask_role == 'plaintiff' else other_parties.full_names() }
      - "defendants": ${ other_parties.full_names() if user_ask_role == 'plaintiff' else users.full_names() }
      - "form_to_be_delivered": ${ form_name }

      - "delivery_party1_name_full": | 
          % if delivery_parties[4].is_represented:
          ${ delivery_parties[4].lawyer.name.full(middle="full") }, (lawyer for ${ delivery_parties[4].name.full(middle="full") })
          % else:
          ${ delivery_parties[4].name.full(middle="full") }
          % endif
      - "delivery_party1_mail_address_on_one_line": ${ delivery_parties[4].address.on_one_line(bare=True) }
      - "delivery_party1_email": ${ delivery_parties[4].delivery_email if delivery_parties[4].knows_delivery_method else '' }
      - "is_delivery_party1_hand_yes": ${ delivery_parties[4].hand_delivery if delivery_parties[4].knows_delivery_method else '' }
      - "is_delivery_party1_mail_yes": ${ delivery_parties[4].mail_delivery if delivery_parties[4].knows_delivery_method else '' }
      - "is_delivery_party1_efm_yes": ${ delivery_parties[4].efm_delivery if delivery_parties[4].knows_delivery_method else '' }
      - "is_delivery_party1_email_yes": ${ delivery_parties[4].email_delivery if delivery_parties[4].knows_delivery_method else '' }
      - "delivery_party1_date": ${ delivery_parties[4].delivery_date if delivery_parties[4].knows_delivery_method else '' }
      - "delivery_party1_time": ${ format_time(delivery_parties[4].delivery_time, format='h:mm') if delivery_parties[4].knows_delivery_method else '' }
      - "is_delivery_party1_am_yes": ${ True if format_time(delivery_parties[4].delivery_time, format='a')=='AM' else '' }
      - "is_delivery_party1_am_no": ${ True if format_time(delivery_parties[4].delivery_time, format='a')=='PM' else '' }
      
      - "delivery_party2_name_full": | 
          % if delivery_parties[5].is_represented:
          ${ delivery_parties[5].lawyer.name.full(middle="full") }, (lawyer for ${ delivery_parties[5].name.full(middle="full") })
          % else:
          ${ delivery_parties[5].name.full(middle="full") }
          % endif
      - "delivery_party2_mail_address_on_one_line": ${ delivery_parties[5].address.on_one_line(bare=True) }
      - "delivery_party2_email": ${ delivery_parties[5].delivery_email if delivery_parties[5].knows_delivery_method else '' }
      - "is_delivery_party2_hand_yes": ${ delivery_parties[5].hand_delivery if delivery_parties[5].knows_delivery_method else '' }
      - "is_delivery_party2_mail_yes": ${ delivery_parties[5].mail_delivery if delivery_parties[5].knows_delivery_method else '' }
      - "is_delivery_party2_efm_yes": ${ delivery_parties[5].efm_delivery if delivery_parties[5].knows_delivery_method else '' }
      - "is_delivery_party2_email_yes": ${ delivery_parties[5].email_delivery if delivery_parties[5].knows_delivery_method else '' }
      - "delivery_party2_date": ${ delivery_parties[5].delivery_date if delivery_parties[5].knows_delivery_method else '' }
      - "delivery_party2_time": ${ format_time(delivery_parties[5].delivery_time, format='h:mm') if delivery_parties[5].knows_delivery_method else '' }
      - "is_delivery_party2_am_yes": ${ True if format_time(delivery_parties[5].delivery_time, format='a')=='AM' else '' }
      - "is_delivery_party2_am_no": ${ True if format_time(delivery_parties[5].delivery_time, format='a')=='PM' else '' }

      - "user": ${ users[0].name.full(middle="full") }
      - "user_mail_address_line_one": ${ users[0].address.line_one(bare=True) }
      - "user_mail_address_city_state_zip": ${ users[0].address.line_two() }
      - "user_phone_number": ${ phone_number_formatted(users[0].phone_number) }
      - "user_email": ${ users[0].email if users[0].email_notice else '' }
      - "e_sign_name": ${ users[0].name.full(middle="full") if e_signature else '' }
---
attachment:
  variable name: illinois_appearance_additional_3[i]
  name: illinois_appearance_additional_3
  filename: appearance-additional-delivery-3
  skip undefined: True
  editable: False
  pdf template file: appearance_additional_proof_delivery_edited.pdf
  fields:
      - "trial_court_county": ${ trial_court.address.county.upper() }
      - "case_number__1": ${ case_number }
      - "case_number__2": ${ case_number }
      - "plaintiffs": ${ users.full_names() if user_ask_role == 'plaintiff' else other_parties.full_names() }
      - "defendants": ${ other_parties.full_names() if user_ask_role == 'plaintiff' else users.full_names() }
      - "form_to_be_delivered": ${ form_name }

      - "delivery_party1_name_full": | 
          % if delivery_parties[6].is_represented:
          ${ delivery_parties[6].lawyer.name.full(middle="full") }, (lawyer for ${ delivery_parties[6].name.full(middle="full") })
          % else:
          ${ delivery_parties[6].name.full(middle="full") }
          % endif
      - "delivery_party1_mail_address_on_one_line": ${ delivery_parties[6].address.on_one_line(bare=True) }
      - "delivery_party1_email": ${ delivery_parties[6].delivery_email if delivery_parties[6].knows_delivery_method else '' }
      - "is_delivery_party1_hand_yes": ${ delivery_parties[6].hand_delivery if delivery_parties[6].knows_delivery_method else '' }
      - "is_delivery_party1_mail_yes": ${ delivery_parties[6].mail_delivery if delivery_parties[6].knows_delivery_method else '' }
      - "is_delivery_party1_efm_yes": ${ delivery_parties[6].efm_delivery if delivery_parties[6].knows_delivery_method else '' }
      - "is_delivery_party1_email_yes": ${ delivery_parties[6].email_delivery if delivery_parties[6].knows_delivery_method else '' }
      - "delivery_party1_date": ${ delivery_parties[6].delivery_date if delivery_parties[6].knows_delivery_method else '' }
      - "delivery_party1_time": ${ format_time(delivery_parties[6].delivery_time, format='h:mm') if delivery_parties[6].knows_delivery_method else '' }
      - "is_delivery_party1_am_yes": ${ True if format_time(delivery_parties[6].delivery_time, format='a')=='AM' else '' }
      - "is_delivery_party1_am_no": ${ True if format_time(delivery_parties[6].delivery_time, format='a')=='PM' else '' }
      
      - "delivery_party2_name_full": | 
          % if delivery_parties[7].is_represented:
          ${ delivery_parties[7].lawyer.name.full(middle="full") }, (lawyer for ${ delivery_parties[7].name.full(middle="full") })
          % else:
          ${ delivery_parties[7].name.full(middle="full") }
          % endif
      - "delivery_party2_mail_address_on_one_line": ${ delivery_parties[7].address.on_one_line(bare=True) }
      - "delivery_party2_email": ${ delivery_parties[7].delivery_email if delivery_parties[7].knows_delivery_method else '' }
      - "is_delivery_party2_hand_yes": ${ delivery_parties[7].hand_delivery if delivery_parties[7].knows_delivery_method else '' }
      - "is_delivery_party2_mail_yes": ${ delivery_parties[7].mail_delivery if delivery_parties[7].knows_delivery_method else '' }
      - "is_delivery_party2_efm_yes": ${ delivery_parties[7].efm_delivery if delivery_parties[7].knows_delivery_method else '' }
      - "is_delivery_party2_email_yes": ${ delivery_parties[7].email_delivery if delivery_parties[7].knows_delivery_method else '' }
      - "delivery_party2_date": ${ delivery_parties[7].delivery_date if delivery_parties[7].knows_delivery_method else '' }
      - "delivery_party2_time": ${ format_time(delivery_parties[7].delivery_time, format='h:mm') if delivery_parties[7].knows_delivery_method else '' }
      - "is_delivery_party2_am_yes": ${ True if format_time(delivery_parties[7].delivery_time, format='a')=='AM' else '' }
      - "is_delivery_party2_am_no": ${ True if format_time(delivery_parties[7].delivery_time, format='a')=='PM' else '' }
      
      - "user": ${ users[0].name.full(middle="full") }
      - "user_mail_address_line_one": ${ users[0].address.line_one(bare=True) }
      - "user_mail_address_city_state_zip": ${ users[0].address.line_two() }
      - "user_phone_number": ${ phone_number_formatted(users[0].phone_number) }
      - "user_email": ${ users[0].email if users[0].email_notice else '' }
      - "e_sign_name": ${ users[0].name.full(middle="full") if e_signature else '' }
---
attachment:
  variable name: illinois_appearance_additional_blank[i]
  name: illinois_appearance_additional_blank
  filename: appearance-additional-delivery-blank
  skip undefined: True
  editable: True
  pdf template file: appearance_additional_proof_delivery_edited.pdf
  fields:
      - "trial_court_county": ${ "" }
---
############### Review page
id: review screen
event: review_answers
question: |
  Review screen
subquestion: |
  Edit your answers below.
review: 
  - Edit: user_ask_role
    button: |
      % if user_ask_role == "plaintiff":
        **Your role:** plaintiff or petitioner
      % else:
        **Your role:** defendant or respondent
      % endif
  - Edit: users.revisit
    button: |
      **Your party: (Edit to change names, lawyers, and delivery info)**

      % for my_var in users:
        * ${ my_var.name.full(middle="full") }
      % endfor
  - Edit: other_parties.revisit
    button: |
      **The other party: (Edit to change names, lawyers, and delivery info)**

      % for my_var in other_parties:
        * ${ my_var.name.full(middle="full") }
      % endfor
  - Edit: 
      - trial_court_index
      - recompute:
        - trial_court
    button: |
      **County where this case is filed:**
      ${ trial_court }
  - Edit: case_number
    button: |
      **Case number:**
      ${ case_number }
  - Edit: is_trial_by_jury
    button: |
      **Do you want a jury trial?**
      ${ word(yesno(is_trial_by_jury)) }
  - label: Edit
    fields:
      - do_what_choice
      - recompute:
        - found_case
    button: |
      ** Court Case:**
      ${ found_case.title } (${ found_case.date })
    show if: can_check_efile
  # TODO(brycew): we need to essentially retrigger the entire interview if they want to
  # change this. Not sure how best to do that.
  #- Edit: user_wants_efile
  #  button: |
  #    You said you **${ "did" if user_wants_efile else "did not" }** want to file a fee-waiver
  #  show if: efile_setup
  #  follow up:
  #    - tyler_login
  #    - found_case
  #    -
  - Edit: users[0].address.address
    button: |
      **Your address:**
      ${ users[0].address.on_one_line(bare=True) }
  - Edit: users[0].phone_number
    button: |
      **Your phone number:**
      ${ phone_number_formatted(users[0].phone_number) }
  - Edit: users[0].email_notice
    button: |
      **Do you want to receive court notices by email?**
      ${ word(yesno(users[0].email_notice)) }
  - Edit: users[0].email
    button: |
      **Your email:**
      ${ users[0].email }
    show if: users[0].email_notice
  - Edit: e_signature
    button: |
      **Do you want to add your e-signature?**
      ${ word(yesno(e_signature)) }
    show if: not can_check_efile
---
#needs: yes_no_unknown
continue button field: x.review_delivery
generic object: ALIndividual
question: |
  Edit ${ x.name.full(middle="full") }'s information
review: 
  - Edit: x.name.first
    button: |
      **Party name:**
      ${ x.name.full(middle="full")  }
  - Edit: x.is_represented
    button: |
      **Does ${ x.name.full(middle="full") } have a lawyer?**
      % if x.is_represented is None:
      I don't know
      % else:
      ${ word(yesno(x.is_represented)) }
      % endif
  - Edit: x.lawyer.name.first
    button: |
      **Lawyer name:**
      ${ x.lawyer.name.full(middle="full") }
    show if: x.is_represented
  - Edit: x.address.address
    button: |
      % if x.is_represented == True:
      **${ x.lawyer.name.full(middle="full") }'s address: **
      % else:
      **${ x.name.full(middle="full") }'s address: **
      % endif
      ${ x.address.on_one_line(bare=True) }
  - Edit: x.knows_delivery_method
    button: |
      **Do you know how you will deliver your forms to them?**
      ${ word(yesno(x.knows_delivery_method)) }
  - Edit: x.hand_delivery
    button: |
      **Delivery by: (Edit to view and change details)**
      
      % if x.efm_delivery == True:
        * E-filing system
      % endif
      % if x.email_delivery == True:
        * Email
      % endif
      % if x.hand_delivery == True:
        * Hand
      % endif
      % if x.mail_delivery == True:
        * US mail or delivery company
      % endif
    show if: x.knows_delivery_method
  - Edit: x.delivery_date
    button: |
      **Delivery on:**
      ${ x.delivery_date } at ${ format_time(x.delivery_time, "h:mm a") }
    show if: x.knows_delivery_method
---
continue button field: users.revisit
question: |
  Edit the ${ user_ask_role }s
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full(middle="full") if defined("row_item.name.first") else ""
  - Party, lawyer, and delivery info: |
      action_button_html(url_action(row_item.attr_name("review_delivery")), label="Edit", icon="pencil-alt") #if not row_item == users[0] else ""
#edit:
#  - name.first
delete buttons: True
confirm: True
---
continue button field: other_parties.revisit
question: |
  % if user_ask_role == "plaintiff":
    Edit the defendants
  % else:
    Edit the plaintiffs
  % endif
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full(middle="full") if defined("row_item.name.first") else ""
  - Party, lawyer, and delivery info: |
      action_button_html(url_action(row_item.attr_name("review_delivery")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
